import { Injectable, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class ElectronService {
    /**
     * @return {?}
     */
    get electron() {
        if (!this._electron) {
            if (window && window.require) {
                this._electron = window.require('electron');
                return this._electron;
            }
            return null;
        }
        return this._electron;
    }
    /**
     * determines if SPA is running in Electron
     * @return {?}
     */
    get isElectronApp() {
        return !!window.navigator.userAgent.match(/Electron/);
    }
    /**
     * @return {?}
     */
    get isMacOS() {
        return this.isElectronApp && process.platform === 'darwin';
    }
    /**
     * @return {?}
     */
    get isWindows() {
        return this.isElectronApp && process.platform === 'win32';
    }
    /**
     * @return {?}
     */
    get isLinux() {
        return this.isElectronApp && process.platform === 'linux';
    }
    /**
     * @return {?}
     */
    get isX86() {
        return this.isElectronApp && process.arch === 'ia32';
    }
    /**
     * @return {?}
     */
    get isX64() {
        return this.isElectronApp && process.arch === 'x64';
    }
    /**
     * @return {?}
     */
    get desktopCapturer() {
        return this.electron ? this.electron.desktopCapturer : null;
    }
    /**
     * @return {?}
     */
    get ipcRenderer() {
        return this.electron ? this.electron.ipcRenderer : null;
    }
    /**
     * @return {?}
     */
    get remote() {
        return this.electron ? this.electron.remote : null;
    }
    /**
     * @return {?}
     */
    get webFrame() {
        return this.electron ? this.electron.webFrame : null;
    }
    /**
     * @return {?}
     */
    get clipboard() {
        return this.electron ? this.electron.clipboard : null;
    }
    /**
     * @return {?}
     */
    get crashReporter() {
        return this.electron ? this.electron.crashReporter : null;
    }
    /**
     * @return {?}
     */
    get process() {
        return this.remote ? this.remote.process : null;
    }
    /**
     * @return {?}
     */
    get nativeImage() {
        return this.electron ? this.electron.nativeImage : null;
    }
    /**
     * @return {?}
     */
    get screen() {
        return this.electron ? this.electron.screen : null;
    }
    /**
     * @return {?}
     */
    get shell() {
        return this.electron ? this.electron.shell : null;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class ElectronServiceRef extends ElectronService {
    constructor() {
        super();
    }
}
ElectronServiceRef.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ElectronServiceRef.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class NgxElectronModule {
}
NgxElectronModule.decorators = [
    { type: NgModule, args: [{
                declarations: [],
                exports: [],
                providers: [{ provide: ElectronService, useClass: ElectronServiceRef }]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { NgxElectronModule, ElectronService, ElectronServiceRef };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWVsZWN0cm9uLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9uZ3gtZWxlY3Ryb24vbGliL2VsZWN0cm9uLnNlcnZpY2UudHMiLCJuZzovL25neC1lbGVjdHJvbi9saWIvZWxlY3Ryb24uc2VydmljZS5yZWYudHMiLCJuZzovL25neC1lbGVjdHJvbi9wdWJsaWNfYXBpLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEVsZWN0cm9uIGZyb20gJ2VsZWN0cm9uJztcbmltcG9ydCB7IEVsZWN0cm9uV2luZG93IH0gZnJvbSAnLi90eXBpbmdzL2VsZWN0cm9uLndpbmRvdyc7XG5cbmRlY2xhcmUgbGV0IHdpbmRvdzogRWxlY3Ryb25XaW5kb3c7XG5cbmV4cG9ydCBjbGFzcyBFbGVjdHJvblNlcnZpY2Uge1xuICAgIHByaXZhdGUgX2VsZWN0cm9uOiBFbGVjdHJvbi5SZW5kZXJlckludGVyZmFjZTtcblxuICAgIHByaXZhdGUgZ2V0IGVsZWN0cm9uKCk6IEVsZWN0cm9uLlJlbmRlcmVySW50ZXJmYWNlIHtcbiAgICAgICAgaWYgKCF0aGlzLl9lbGVjdHJvbikge1xuICAgICAgICAgICAgaWYgKHdpbmRvdyAmJiB3aW5kb3cucmVxdWlyZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VsZWN0cm9uID0gd2luZG93LnJlcXVpcmUoJ2VsZWN0cm9uJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VsZWN0cm9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2VsZWN0cm9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGRldGVybWluZXMgaWYgU1BBIGlzIHJ1bm5pbmcgaW4gRWxlY3Ryb25cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGlzRWxlY3Ryb25BcHAoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhIXdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9FbGVjdHJvbi8pO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaXNNYWNPUygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNFbGVjdHJvbkFwcCAmJiBwcm9jZXNzLnBsYXRmb3JtID09PSAnZGFyd2luJztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGlzV2luZG93cygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNFbGVjdHJvbkFwcCAmJiBwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaXNMaW51eCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNFbGVjdHJvbkFwcCAmJiBwcm9jZXNzLnBsYXRmb3JtID09PSAnbGludXgnO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaXNYODYoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzRWxlY3Ryb25BcHAgJiYgcHJvY2Vzcy5hcmNoID09PSAnaWEzMic7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBpc1g2NCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNFbGVjdHJvbkFwcCAmJiBwcm9jZXNzLmFyY2ggPT09ICd4NjQnO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgZGVza3RvcENhcHR1cmVyKCk6IEVsZWN0cm9uLkRlc2t0b3BDYXB0dXJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZWN0cm9uID8gdGhpcy5lbGVjdHJvbi5kZXNrdG9wQ2FwdHVyZXIgOiBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaXBjUmVuZGVyZXIoKTogRWxlY3Ryb24uSXBjUmVuZGVyZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVjdHJvbiA/IHRoaXMuZWxlY3Ryb24uaXBjUmVuZGVyZXIgOiBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgcmVtb3RlKCk6IEVsZWN0cm9uLlJlbW90ZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZWN0cm9uID8gdGhpcy5lbGVjdHJvbi5yZW1vdGUgOiBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgd2ViRnJhbWUoKTogRWxlY3Ryb24uV2ViRnJhbWUge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVjdHJvbiA/IHRoaXMuZWxlY3Ryb24ud2ViRnJhbWUgOiBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgY2xpcGJvYXJkKCk6IEVsZWN0cm9uLkNsaXBib2FyZCB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZWN0cm9uID8gdGhpcy5lbGVjdHJvbi5jbGlwYm9hcmQgOiBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgY3Jhc2hSZXBvcnRlcigpOiBFbGVjdHJvbi5DcmFzaFJlcG9ydGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlY3Ryb24gPyB0aGlzLmVsZWN0cm9uLmNyYXNoUmVwb3J0ZXIgOiBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgcHJvY2VzcygpOiBhbnkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdGUgPyB0aGlzLnJlbW90ZS5wcm9jZXNzIDogbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IG5hdGl2ZUltYWdlKCk6IHR5cGVvZiBFbGVjdHJvbi5uYXRpdmVJbWFnZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZWN0cm9uID8gdGhpcy5lbGVjdHJvbi5uYXRpdmVJbWFnZSA6IG51bGw7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBzY3JlZW4oKTogRWxlY3Ryb24uU2NyZWVuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlY3Ryb24gPyB0aGlzLmVsZWN0cm9uLnNjcmVlbiA6IG51bGw7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBzaGVsbCgpOiBFbGVjdHJvbi5TaGVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZWN0cm9uID8gdGhpcy5lbGVjdHJvbi5zaGVsbCA6IG51bGw7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRWxlY3Ryb25TZXJ2aWNlIH0gZnJvbSAnLi9lbGVjdHJvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEVsZWN0cm9uU2VydmljZVJlZiBleHRlbmRzIEVsZWN0cm9uU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRWxlY3Ryb25TZXJ2aWNlIH0gZnJvbSAnLi9saWIvZWxlY3Ryb24uc2VydmljZSc7XG5pbXBvcnQgeyBFbGVjdHJvblNlcnZpY2VSZWYgfSBmcm9tICcuL2xpYi9lbGVjdHJvbi5zZXJ2aWNlLnJlZic7XG5cbmV4cG9ydCAqIGZyb20gJy4vbGliL2VsZWN0cm9uLnNlcnZpY2UnO1xuZXhwb3J0ICogZnJvbSAnLi9saWIvZWxlY3Ryb24uc2VydmljZS5yZWYnO1xuXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogW10sXG4gICAgZXhwb3J0czogW10sXG4gICAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBFbGVjdHJvblNlcnZpY2UsIHVzZUNsYXNzOiBFbGVjdHJvblNlcnZpY2VSZWYgfV1cbn0pXG5leHBvcnQgY2xhc3MgTmd4RWxlY3Ryb25Nb2R1bGUge1xuXG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBS0EsTUFBYSxlQUFlOzs7O0lBR3hCLElBQVksUUFBUTtRQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNqQixJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFO2dCQUMxQixJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQzVDLE9B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